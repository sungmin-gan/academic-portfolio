{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red154\green154\blue154;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red144\green1\blue18;\red19\green120\blue72;}
{\*\expandedcolortbl;;\cssrgb\c66667\c66667\c66667;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c63922\c8235\c8235;\cssrgb\c3529\c53333\c35294;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #2 Boolean Expressions\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#2 Boolean Expressions\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 true = \cf5 \strokec5 True\cf4 \cb1 \strokec4 \
\cb3 false = \cf5 \strokec5 False\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  true == \cf5 \strokec5 True\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "'true' is True!"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  false != \cf5 \strokec5 True\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "'false' is False!"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #3 Short Circuit Evaluation\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#3 Short Circuit Evaluation\\n"\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 def\cf4 \strokec4  true():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "I'm in true!"\cf4 \strokec4 )\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 True\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  false():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "I'm in false!"\cf4 \strokec4 )\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 False\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "OR"\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 if\cf4 \strokec4  true() \cf5 \strokec5 or\cf4 \strokec4  false():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "false should not execute"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\nAND"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 if\cf4 \strokec4  false() \cf5 \strokec5 and\cf4 \strokec4  true():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Nothing will print :("\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #4 Numerical Types\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#4 Numerical Types\\n"\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf5 \strokec5 int\cf4 \strokec4 (\cf7 \strokec7 4.568\cf4 \strokec4 ))\cb1 \
\cf5 \cb3 \strokec5 print\cf4 \strokec4 ((\cf7 \strokec7 1\cf4 \strokec4 +\cf7 \strokec7 2j\cf4 \strokec4 )+(\cf7 \strokec7 1\cf4 \strokec4 +\cf7 \strokec7 2j\cf4 \strokec4 ))\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #5 Strings\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#5 Strings\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 hello = \cf6 \strokec6 "Hello"\cf4 \cb1 \strokec4 \
\cb3 test = \cf6 \strokec6 'Does This Work?'\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (hello.replace(\cf6 \strokec6 "He"\cf4 \strokec4 ,\cf6 \strokec6 "'E"\cf4 \strokec4 ) + \cf6 \strokec6 ", "\cf4 \strokec4  + test.lower())\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 response = \cf6 \strokec6 "Yes it does!"\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (response[\cf7 \strokec7 0\cf4 \strokec4 :\cf7 \strokec7 3\cf4 \strokec4 ]+\cf6 \strokec6 "!"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #6 Arrays\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#6 Arrays\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 array = [\cf7 \strokec7 1\cf4 \strokec4 ,\cf7 \strokec7 2\cf4 \strokec4 ,\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 5\cf4 \strokec4 ,\cf7 \strokec7 4\cf4 \strokec4 ,\cf7 \strokec7 3\cf4 \strokec4 ]\cb1 \
\cb3 array.sort()\cb1 \
\cb3 array.append(\cf6 \strokec6 'A'\cf4 \strokec4 )\cb1 \
\cb3 array.append(\cf6 \strokec6 'B'\cf4 \strokec4 )\cb1 \
\cb3 array.append(\cf6 \strokec6 'C'\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  array:\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (x)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "The letter 'A' appears "\cf4 \strokec4 , array.count(\cf6 \strokec6 'A'\cf4 \strokec4 ), \cf6 \strokec6 " time(s) in 'array'."\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #7 Lists\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#7 Lists\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 languagesMastered = [\cf6 \strokec6 "Python"\cf4 \strokec4 ,\cf6 \strokec6 "Java"\cf4 \strokec4 ,\cf6 \strokec6 "C++"\cf4 \strokec4 ]\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  \cf6 \strokec6 "HTML"\cf4 \strokec4  \cf5 \strokec5 in\cf4 \strokec4  languagesMastered:\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "This is a candidate."\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 else\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Not qualified."\cf4 \strokec4 )\cb1 \
\cb3 languagesMasteredUpdated = languagesMastered.copy()\cb1 \
\cb3 languagesMasteredUpdated.append(\cf6 \strokec6 "Swift"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (languagesMasteredUpdated)\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #8 Tuples\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#8 Tuples\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 testTuple = (\cf6 \strokec6 "apples"\cf4 \strokec4 ,\cf6 \strokec6 "bananas"\cf4 \strokec4 , \cf6 \strokec6 "cherries"\cf4 \strokec4 , \cf6 \strokec6 "bananas"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  testTuple.count(\cf6 \strokec6 "bananas"\cf4 \strokec4 ) > \cf7 \strokec7 0\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "There are multiple instances of 'bananas' in 'testTuple'."\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #9 Slices\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#9 Slices\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 newArray = [\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 1\cf4 \strokec4 ,\cf7 \strokec7 2\cf4 \strokec4 ,\cf7 \strokec7 3\cf4 \strokec4 ,\cf7 \strokec7 4\cf4 \strokec4 ,\cf7 \strokec7 5\cf4 \strokec4 ,\cf7 \strokec7 6\cf4 \strokec4 ]\cb1 \
\cb3 newSlice = \cf5 \strokec5 slice\cf4 \strokec4 (\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 7\cf4 \strokec4 ,\cf7 \strokec7 2\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (newArray[newSlice])\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #10 Index Range Checking & #1 Interpretation\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#10 Index Range Checking & #1 Interpretation\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 newList = [\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 1\cf4 \strokec4 ,\cf7 \strokec7 2\cf4 \strokec4 ,\cf7 \strokec7 3\cf4 \strokec4 ,\cf7 \strokec7 4\cf4 \strokec4 ,\cf7 \strokec7 5\cf4 \strokec4 ]\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #print(newList[7])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #Above line throws 'IndexError: list index out of range'\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #for x in range(7):\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #  print(newList[x])\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #Interestingly, the above two lines of code output the numbers 0-5, or newList[0] to newList[6] but throws an 'IndexError: list index out of range' once it reaches newList[7]\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #This shows how Python is an interpreted languages, meaning the lines of code are execuited dynamically\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #11 Dictionaries\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#11 Dictionaries\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 car = \{\cf6 \strokec6 "Make"\cf4 \strokec4 : \cf6 \strokec6 "Porsche"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 "Model"\cf4 \strokec4 : \cf6 \strokec6 "Carrera"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 "Year"\cf4 \strokec4 : \cf7 \strokec7 1997\cf4 \strokec4 \}\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Make: "\cf4 \strokec4 , car[\cf6 \strokec6 "Make"\cf4 \strokec4 ])\cb1 \
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Model: "\cf4 \strokec4 , car.get(\cf6 \strokec6 "Model"\cf4 \strokec4 ))\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 car[\cf6 \strokec6 "Year"\cf4 \strokec4 ] = \cf7 \strokec7 1998\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Year:"\cf4 \strokec4 , car[\cf6 \strokec6 "Year"\cf4 \strokec4 ],\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  car:\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (x,\cf6 \strokec6 ": "\cf4 \strokec4 , car[x])\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x,y \cf5 \strokec5 in\cf4 \strokec4  car.items():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (x,\cf6 \strokec6 ": "\cf4 \strokec4 ,y)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  car.values():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (x)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 if\cf4 \strokec4  \cf6 \strokec6 "VIN"\cf4 \strokec4  \cf5 \strokec5 in\cf4 \strokec4  car:\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "The VIN is a key in this dictionary"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 else\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "The VIN is not a key in this dictionary"\cf4 \strokec4 )\cb1 \
\cb3 car[\cf6 \strokec6 "VIN"\cf4 \strokec4 ] = \cf7 \strokec7 1234\cf4 \cb1 \strokec4 \
\cb3 car[\cf6 \strokec6 "Registered"\cf4 \strokec4 ] = \cf5 \strokec5 True\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (car)\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 car.pop(\cf6 \strokec6 "VIN"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 del\cf4 \strokec4  car[\cf6 \strokec6 "Registered"\cf4 \strokec4 ]\cb1 \
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (car)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 car.popitem()\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (car)\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #12 If Statement\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#12 If Statement\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 usingPython = \cf6 \strokec6 "Fun"\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  usingPython == \cf6 \strokec6 "Fun"\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Python is indeed very fun."\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 elif\cf4 \strokec4  usingPython == \cf6 \strokec6 "Easy"\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Yes, Python is very easy."\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 else\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "To you, Python is "\cf4 \strokec4  + usingPython + \cf6 \strokec6 "."\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #13 Switch Statement\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#13 Switch Statement\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #Switch statements do not exist in Python\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #However, an equivalent can be implemented using\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #a dictionary:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  intToMonth(argument):\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3     switcher = \{\cb1 \
\cb3         \cf7 \strokec7 1\cf4 \strokec4 : \cf6 \strokec6 "January"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 2\cf4 \strokec4 : \cf6 \strokec6 "February"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 3\cf4 \strokec4 : \cf6 \strokec6 "March"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 4\cf4 \strokec4 : \cf6 \strokec6 "April"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 5\cf4 \strokec4 : \cf6 \strokec6 "May"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 6\cf4 \strokec4 : \cf6 \strokec6 "June"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 7\cf4 \strokec4 : \cf6 \strokec6 "July"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 8\cf4 \strokec4 : \cf6 \strokec6 "August"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 9\cf4 \strokec4 : \cf6 \strokec6 "September"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 10\cf4 \strokec4 : \cf6 \strokec6 "October"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 11\cf4 \strokec4 : \cf6 \strokec6 "November"\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 12\cf4 \strokec4 : \cf6 \strokec6 "December"\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  switcher.get(argument, \cf6 \strokec6 "Invalid Month"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (intToMonth(\cf7 \strokec7 4\cf4 \strokec4 ))\cb1 \
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (intToMonth(\cf7 \strokec7 13\cf4 \strokec4 ))\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #This implementation even returns a default statement if an inappropriate input is given.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #An explicit switch statement probably wasn't implemented in Python because a dictionary basically acts as a switch statement, or vice versa.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #14 For Loop\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#14 For Loop\\n"\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 list\cf4 \strokec4  = [\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 1\cf4 \strokec4 ,\cf7 \strokec7 2\cf4 \strokec4 ,\cf7 \strokec7 3\cf4 \strokec4 ,\cf7 \strokec7 4\cf4 \strokec4 ,\cf7 \strokec7 5\cf4 \strokec4 ]\cb1 \
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  \cf5 \strokec5 list\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (x)\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  x == \cf7 \strokec7 3\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 break\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  \cf5 \strokec5 list\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 if\cf4 \strokec4  x == \cf7 \strokec7 3\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 break\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 print\cf4 \strokec4 (x)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  \cf5 \strokec5 list\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 if\cf4 \strokec4  x == \cf7 \strokec7 3\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 continue\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 print\cf4 \strokec4 (x)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 else\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Loop Ended"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #15 While Loop\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#15 While Loop"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 capacity = \cf7 \strokec7 5\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 while\cf4 \strokec4  capacity > \cf7 \strokec7 0\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   capacity -= \cf7 \strokec7 1\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  capacity == \cf7 \strokec7 3\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 continue\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 print\cf4 \strokec4 (capacity)\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #16 Indentation to Denote Code Blocks\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #Indentation in Python is extremely important as they serve as the equivalent of curly brackets in other languages such as C++\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #17 Type Binding\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #Python uses dynamic type binding, as this is an interpreted language and not a compiled language. This makes it so much easier to write generic programs that otherwise would take much more time to write in compiled languages. The main disadvantage of this; however, is that it lacks the level of protection from errors that static type binding can offer. \cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #18 Type Checking\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#18 Type Checking\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 # For a long time, static type checking did not exist in Python. As mentioned in the previous section, this made programs written in Python more prone to errors. However, in Python 3.6, we can now declare variable types like so:\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 name: \cf5 \strokec5 str\cf4 \strokec4  = \cf6 \strokec6 "Sung"\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #So if I try to do something like:\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  helloName(name:\cf5 \strokec5 str\cf4 \strokec4 ) -> \cf5 \strokec5 str\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "Hello, "\cf4 \strokec4  + name)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 # with helloName(7),\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #Python will throw "TypeError: must be str, not int"\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #P.S. the -> str after the function name and parameters declares the return type of the function\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 helloName(\cf6 \strokec6 "Sung"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #19 Functions\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#19 Functions\\n"\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 def\cf4 \strokec4  printCountry(country = \cf6 \strokec6 "the USA"\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "I am from "\cf4 \strokec4  + country, \cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\cb3 printCountry(\cf6 \strokec6 "France"\cf4 \strokec4 )\cb1 \
\
\cb3 fruits = [\cf6 \strokec6 "apples"\cf4 \strokec4 , \cf6 \strokec6 "bananas"\cf4 \strokec4 , \cf6 \strokec6 "cherries"\cf4 \strokec4 ]\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  printGroceryList(category):\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 for\cf4 \strokec4  x \cf5 \strokec5 in\cf4 \strokec4  category:\cb1 \
\cb3     \cf5 \strokec5 print\cf4 \strokec4 (x)\cb1 \
\cb3 printGroceryList(fruits)\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  factorial(k):\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 if\cf4 \strokec4  k > \cf7 \strokec7 1\cf4 \strokec4 :\cb1 \
\cb3     result = k * factorial(k\cf7 \strokec7 -1\cf4 \strokec4 )\cb1 \
\cb3   \cf5 \strokec5 else\cf4 \strokec4 :\cb1 \
\cb3     result = \cf7 \strokec7 1\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  result\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (factorial(\cf7 \strokec7 5\cf4 \strokec4 ))\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #20 Enumerations\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n#20 Enumerations\\n"\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #Enumerations were implemented in Python v3.4\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #It is implemented as a class with several member functions; however, here we will only the most basic enumeration nomenclature and member functions:\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 from\cf4 \strokec4  enum \cf5 \strokec5 import\cf4 \strokec4  Enum\cb1 \
\cf5 \cb3 \strokec5 class\cf4 \strokec4  Color(Enum):\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   RED = \cf7 \strokec7 1\cf4 \cb1 \strokec4 \
\cb3   BLUE = \cf7 \strokec7 2\cf4 \cb1 \strokec4 \
\cb3   GREEN = \cf7 \strokec7 3\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #Enum members are iterable, in defition order:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 for\cf4 \strokec4  color \cf5 \strokec5 in\cf4 \strokec4  Color:\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (color)\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #Enum members are hashable, and can be used in dictionaries:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 popsicles = \{\}\cb1 \
\cb3 popsicles[Color.RED] = \cf6 \strokec6 "Tart Cherry"\cf4 \cb1 \strokec4 \
\cb3 popsicles[Color.BLUE] = \cf6 \strokec6 "Sweet Blueberry"\cf4 \cb1 \strokec4 \
\cb3 popsicles[Color.GREEN] = \cf6 \strokec6 "Sour Apple"\cf4 \strokec4  \cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 for\cf4 \strokec4  x,y \cf5 \strokec5 in\cf4 \strokec4  popsicles.items():\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 print\cf4 \strokec4 (x,\cf6 \strokec6 ": "\cf4 \strokec4 ,y)\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 \strokec5 print\cf4 \strokec4 (\cf6 \strokec6 "\\n"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \strokec2 #Overall, my opinion is that Python is an extremely versatile language. It is both easily writeable and readable. One issue of course is that because it is an interpreted language with dynamic type binding and type checking it is more prone to errors than compiled languages such as C++ - even with with the newly implemented static type binding. However, to a novice user like myself, this issue is slight when compared with the amount of benefits this language provides. \cf4 \cb1 \strokec4 \
}